import React, { useEffect, useState, useRef } from 'react';
import Loading from "../../components/UI/Loading/Loading"
import "./Research.css";
import Wave from "../../components/Wave/Wave"

import IAServices from "../../services/IAServices"

import Button from "../../components/UI/Button/Button";
import PinsFlower1 from "../../images/PinsFlower1.png"
import PinsSword1 from "../../images/PinsSword1.png"

import ResultPredictIa from "../../images/ResultPredictIa.gif"
import SadGif from "../../images/SadGif.gif"
import CuteWorking from "../../images/CuteWorking.gif"
import NotFoundGif from "../../images/NotFoundGif.gif"
function Research() {

    const { predictIa } = IAServices
    const refEnd = useRef() // juste pour le scroll
    const [inputResearch, setInputResearch] = useState("")
    const [resResearch, setResResearch] = useState("")
    const [isOpenTechnicalPart, setIsOpenTechnicalPart] = useState("")
    const [isLoading, setIsLoading] = useState(false);
    const onSubmit = async () => {

        let result = "";
        if (inputResearch != "") {
            setIsLoading(true);
            result = await predictIa({
                txt: inputResearch
            })
            setIsLoading(false);
            if (result == "") {
                result = { error: "404" }
            }
            setResResearch(result)
        }
    }

    const handleKeyDown = (e, bool) => {

        e.preventDefault();
        if (e.key === 'Enter' || bool == true) {
            onSubmit();
            return;
        }
    }

    useEffect(() => {

        if (inputResearch == "") return;

        refEnd.current?.scrollIntoView({ behavior: 'smooth' });
    }, []);

    return (
        <div className="main_container">
            <div className="main_title_profil">
                <h1>Un √©quilibre entre R√©alit√© et Id√©al</h1>
            </div>
            <br></br><br></br>

            <Wave text={"Un trou de m√©moire sur le nom d'une divinit√© mythologique grecque ? \nIl vous suffit de demander !"}></Wave>
            <form className="form_search" onSubmit={(e) => { handleKeyDown(e, true) }}>

                <br></br>
                <div className="form_container">
                    <div className="row">
                        <div className="col-25">
                            <label>Description du nom que vous cherchez</label>
                        </div>
                        <div className="col-75" style={{ marginBottom: "25px" }}>
                            <div className="list_checkbox_container">
                                <textarea type="text" style={{ width: "500px", height: "120px" }} onChange={(e) => setInputResearch(e.target.value)}></textarea>
                            </div>
                        </div>
                    </div>
                    {
                        isLoading &&
                        <div className="container_loading">
                            <Loading />
                        </div>
                    }
                    {resResearch && !resResearch.error &&
                        <div className="container_result_profil">
                            <div className="col-25">
                                <img src={ResultPredictIa}></img>
                            </div>
                            <div className="col-75" style={{ marginBottom: "25px" }}>
                                <span>   Le nom que vous cherchiez est : <strong style={{ fontSize: "30px" }}> {resResearch}</strong></span>
                            </div>
                        </div>
                     }
                     {resResearch && resResearch.error &&
                        <div className="container_result_profil">
                            <div className="col-25">
                                <img src={NotFoundGif}></img>
                            </div>
                            <div className="col-75" style={{ marginBottom: "25px" }}>
                                <span>L'IA n'a pas r√©ussie a trouv√© de correspondance avec la description donn√©e.</span>
                            </div>
                        </div>
                    }
                    <div style={{ display: 'flex', justifyContent: 'center' }}>
                        <div className="row" style={{ paddingTop: "100px" }}>
                            <Button label="Voir le r√©sultat" onClick={() => onSubmit()} />
                        </div>
                    </div>

                </div>
            </form >
            <br></br>
            < div ref={refEnd}></div>
            <div className="title_context click-me" onClick={() => setIsOpenTechnicalPart(!isOpenTechnicalPart)}>‚öôÔ∏è Description technique ‚öôÔ∏è</div><br />

            {isOpenTechnicalPart &&
                <div className="paragraphe" style={{ textAlign: "left" }}>

                    <img src={PinsSword1} className="img-top-left" />
                    <img src={PinsFlower1} className="img-bottom-right" />

                    <h3>üì¶ Pr√©visions üì¶ : </h3>
                    <p>
                        En premier lieu, il √©tait pr√©vu d'utiliser un mod√®le d'IA pour g√©n√©rer un nom √† partir d'une description.
                        <br />
                        Pour √ßa, un mod√®le LSTM* (RNN* adapt√© aux longues s√©quences textuelles) a √©t√© con√ßu.<br />
                        Cela dit, √©tant donn√© la faible quantit√© de donn√©es, les r√©sultats ne sont pas utilisables.
                    </p>
                    <p>
                        Ensuite, il √©tait question de cr√©er un mod√®le plus simple pour rechercher un nom en fonction d'une description. <br />
                        Mais encore une fois, le mod√®le ne pouvait pas g√©n√©raliser avec un si petit dataset, comportant autant de diff√©rences.
                    </p>
                    <h3>üë®‚Äçüíª Application üë®‚Äçüíª : </h3>
                    <p>
                        Puisque l'on a d√©j√† d√©velopp√© un mod√®le pour la cat√©gorisation d'un nom, et que les options sont restreintes, nous allons utiliser une IA d√©j√† entra√Æn√©e pour faire un petit moteur de recherche avec nos propres donn√©es.
                    </p>
                    <p>
                        Cela permet √©galement de d√©montrer la diff√©rence entre les simples mod√®les que nous avons entra√Æn√©s avec quelques centaines de lignes et de vrais mod√®les, entra√Æn√©s avec des milliards de donn√©es.
                    </p>
                    <p>
                        Pour ce faire, nous allons utiliser une API tr√®s connue d'OpenAI.
                    </p>
                    <p>
                        L'installation n'est pas compliqu√©e, mais il faut faire attention √† deux choses importantes.
                        <ul>
                            <li>
                                <strong>La premi√®re</strong> est qu'il faut bien d√©crire le contexte avec les donn√©es que nous avons.
                                <br />
                                Nous avons un dataset, et nous ne voulons pas que l'IA sorte de son p√©rim√®tre.
                            </li>
                            <li>
                                <strong>La deuxi√®me</strong> est la consommation des ressources et/ou le "bruit".
                                <br />
                                Il ne faut pas envoyer √† l'IA des informations inutiles (bruit), ni lui dire exactement quoi faire.
                                <br />
                                Il ne faut pas non plus ne rien lui dire, sinon le r√©sultat sera impact√©. Il faut donc trouver le juste milieu afin de cadrer le r√©sultat attendu sans trop en dire.
                            </li>
                        </ul>
                    </p>
                    <p>
                        Dans notre cas, il suffit de lui fournir le dataset avec les colonnes pertinentes, √† savoir les noms en anglais et les descriptions √† comparer.
                        <br />
                        Les autres colonnes ne servent √† rien et ne doivent donc pas √™tre envoy√©es.
                    </p>
                    <p>
                        Il faut √©galement indiquer √† l'IA sa t√¢che principale, √† savoir : comparer la description de l'utilisateur et retourner le nom qui lui semble le plus proche.
                    </p>
                    <p>
                        Une fois ces deux conditions prises en compte, il ne reste plus qu'√† d√©velopper l'outil.
                    </p>
                    <br />
                    <p>
                        Lexique : <br />
                        <ul>
                            <li>
                                <strong>RNN - R√©seau de neuronne r√©current : </strong> mod√®le d'apprentissage profond qui est form√© pour traiter et convertir une entr√©e de donn√©es s√©quentielles en une sortie de donn√©es s√©quentielles sp√©cifique <br />
                            </li>
                            <li>

                                <strong> LSTM - Long Short-Term Memory : </strong> type de r√©seau neuronal r√©current visant √† att√©nuer le probl√®me de gradient de disparition couramment rencontr√© par les RNN traditionnels
                            </li>
                            <span style={{ fontSize: "12px" }}>Source du lexique : Wikip√©dia </span>
                        </ul>


                    </p>
                    <img className="picture_profil_result_etude" style={{ top: "10px", right: "55px" }} src={SadGif}></img>
                    <img className="picture_profil_result_etude" style={{ bottom: "300px", right: "105px" }} src={CuteWorking}></img>


                </div>
            }
        </div >
    );
};

export default Research;