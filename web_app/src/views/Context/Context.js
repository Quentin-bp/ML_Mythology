import React, { useEffect, useState } from 'react';
import { useNavigate } from "react-router-dom";
import "./Context.css";

import PinsFlower1 from "../../images/PinsFlower1.png"
import PinsSword1 from "../../images/PinsSword1.png"
import Mathis from "../../images/Kinavar.png"
import ProportionDivinity from "../../images/graphs/ProportionDivinity.png"
import ProportionSubDivinity from "../../images/graphs/ProportionSubDivinity.png"
import DatasetStructure from "../../images/graphs/DatasetStructure.png"
import Tokens from "../../images/graphs/Tokens.png"
import Names from "../../images/graphs/Names.png"
import HideGif from "../../images/hide-sherlock.gif"

import Wave from "../../components/Wave/Wave"
import Modal from "../../components/Modal/Modal"
import FontTextBackground from "../../components/FontTextBackground/FontTextBackground"
import FontBookBackground from "../../components/FontBookBackground/FontBookBackground"
import Button from '../../components/UI/Button/Button';
import Image from "../../components/UI/Image/Image"

function Context() {
    const navigate = useNavigate();
    const [isOpenExample1, setIsOpenExample1] = useState(false);
    const [isOpenData, setIsOpenData] = useState(false);
    //const [isOpenProblem, setIsOpenProblem] = useState(false);
    const [isOpenNames, setIsOpenNames] = useState(false);
    const [isOpenTokens, setIsOpenTokens] = useState(false);
    const [isOpenTechnicalPart, setisOpenTechnicalPart] = useState(false);
    const [isOpenSpoil, setisOpenSpoil] = useState(false);
    return (
        <div className="main_container">
            <div className="main_title_context">
                <h1>Il √©tait une fois... </h1>
            </div>
            <br></br><br></br>
            <div className="paragraphe">
                <img src={PinsSword1} className="img-top-left" />
                Pour la cr√©ation de personnages dans les histoires de jeux, de romans, de films...<br></br>
                Les noms permettent d‚Äôapporter un premier aper√ßu d‚Äôune entit√© ou de la d√©finir.
                <img src={PinsFlower1} className="img-bottom-right" />
            </div>
            <Wave
                text={"Pour beaucoup d‚Äôauteurs de romans, les noms sont la premi√®re probl√©matique rencontr√©e pour leurs personnages. \nParfois m√™me, un simple nom est li√© √† des m√©taphores complexes."}
                description_modal="Exemple"
                onClick={() => setIsOpenExample1(true)}
            ></Wave>
            {isOpenExample1 && <Modal setIsOpen={setIsOpenExample1} title={"Un nom au service de l'Histoire"} img={Mathis} legend={<span>Par exemple : un personnage principal appel√© "Mathis", dans un monde fantaisiste, ne fait pas grand sens tant c'est un nom normal. Maintenant, avec quelques recherches, nous comprenons que <span style={{ fontWeight: "bold" }}>Mathis = "Don de Dieu". </span></span>} />}
            <FontTextBackground main={"Chaque nom a un sens !"} description={"Il est rare que des auteurs donnent des noms √† leurs personnages sans arri√®re-pens√©e. Ce projet aura ainsi pour but d‚Äôapporter un sens aux noms gr√¢ce √† l‚ÄôIA. \nPour nous aider, nous utiliserons l‚Äôonomastique afin d‚Äôappliquer et de comprendre le contexte."} />
            <div className="paragraphe">
                <img src={PinsSword1} className="img-top-left" />
                üôã‚Äç‚ôÄÔ∏è : <span style={{ fontWeight: "bold" }}> L'onomastique </span>est l'√©tude des noms propres : comment ils ont √©t√© form√©s, comment ils sont utilis√©s, quelle est leur √©tymologie...<br></br>
                C'est la conversion d'un simple nom en un sens.<br></br>
                Il s'agit d'une discipline scientifique "officielle" datant du <span style={{ fontWeight: "bold" }}> 19√®me si√®cle</span>, bien que, concr√®tement, ce soit une th√©matique remontant aux textes bibliques.
                <img src={PinsFlower1} className="img-bottom-right" />
            </div>
            <Wave
                text={"Pour √™tre efficace et avoir du sens, il faut donc utiliser des noms qui sont r√©guli√®rement utilis√©s dans diff√©rents contextes.\n\
                Nous nous baserons ainsi sur les noms de la mythologie grecque.\n\
                Les autres mythologies, comme la mythologie nordique ou celles d‚ÄôAsie, sont √©galement envisageables.\n\
                Pour rester clairs, nous utiliserons la mythologie grecque, que la plupart des gens connaissent."}
            ></Wave>

            <div className="paragraphe" style={{ textAlign: "left" }}>
                <img src={PinsSword1} className="img-top-left" />
                <img src={PinsFlower1} className="img-bottom-right" />
                <p>Avant de parler d'IA, il faut d'abord commencer par r√©cup√©rer les donn√©es.</p>

                <p>Il existe de nombreux moyens, mais nous utiliserons le <strong>scraping</strong> sur Wikip√©dia pour √ßa.</p>

                <p>Cela pr√©sente deux avantages majeurs :</p>
                <ul>
                    <li>Les donn√©es sont <em>g√©n√©ralement</em> bien structur√©es.</li>
                    <li>Les donn√©es des autres mythologies sont centralis√©es au m√™me endroit.</li>
                </ul>

                <p>Dans le cas o√π nous voudrions √©tendre le projet un jour, cette approche est plus qu'int√©ressante.</p>
            </div>

            <div className="title_context click-me" onClick={() => setisOpenTechnicalPart(!isOpenTechnicalPart)}>‚öôÔ∏è Description technique ‚öôÔ∏è</div><br />

            {isOpenTechnicalPart &&
                <div className="paragraphe" style={{ textAlign: "left" }}>

                    <img src={PinsSword1} className="img-top-left" />
                    <img src={PinsFlower1} className="img-bottom-right" />

                    <h3>üì¶ Principe üì¶ : </h3>
                    <p>
                        Puisque les donn√©es sont scrapp√©es, nous partons du principe qu'elles ne seront pas toujours disponibles telles que nous les avons obtenues.
                        Par exemple :
                    </p>
                    <ul>
                        <li>Suppression du site scrapp√©</li>
                        <li>Modifications de la structure/HTML du site</li>
                        <li>Changements dans les donn√©es elles-m√™mes</li>
                    </ul>
                    <p>Il est donc <strong>imp√©ratif de les stocker correctement</strong>.</p>

                    <h3>‚öôÔ∏è Stockage ‚öôÔ∏è  : </h3>
                    <ul>
                        <li><strong>Sur un serveur en ligne</strong> via <em>Supabase</em> </li>
                        <li><strong>En local</strong> via un fichier <em>Excel</em></li>
                    </ul>
                    <p>
                        Cela permet, en cas de probl√®me technique en local (fichier corrompu, suppression accidentelle...),
                        que les donn√©es soient toujours accessibles en ligne.
                    </p>
                </div>
            }
            <Wave
                text={"Une fois les donn√©es obtenues, il faut travailler avec.\n\ Pour commencer, nous les analysons."}
                description_modal="Donn√©es r√©colt√©es"
                onClick={() => setIsOpenData(true)}
            ></Wave>
            <Image image={ProportionDivinity} legend={<span>On constate qu'il existe trois types de divinit√©s : les Titans, les Dieux et les Personnifications.<br></br> Premier probl√®me : il y a un trop grand nombre de dieux par rapport aux Titans et aux Personnifications.</span>} />
            <br></br>  <br></br>  <br></br>  <br></br>  <br></br>  <br></br>  <br></br>  <br></br>
            <Image image={ProportionSubDivinity} legend={<span>On constate qu'il existe plusieurs sous-types de divinit√©s.<br></br> Second probl√®me : il y a un trop grand nombre de sous-types "dieu" par rapport aux autres cat√©gories.</span>} />
            <br></br>  <br></br>
            {isOpenData && <Modal setIsOpen={setIsOpenData} title={"Un ciel jonch√© d'√©toiles"} img={DatasetStructure} legend={<span>Le dataset comporte <strong>444 lignes.</strong><br></br>A noter : la seconde colonne correspond √† du texte grec mal encod√©.<br></br> C'est pour cela que nous n'arrivons pas √† le lire, mais nous ne l'utiliserons pas par la suite.</span>} />}
            <Wave
                text={<span>Maintenant, avant de commencer la partie IA, nous constatons par avance un probl√®me majeur : le nombre de donn√©es.<br></br>
                    Nous allons nous baser sur les noms, qui sont √©videmment uniques, et au vu du nombre, √ßa ne sera pas viable.<br></br></span>}
            ></Wave>
            <div className="paragraphe">
                <img src={PinsSword1} className="img-top-left" />
                <img src={PinsFlower1} className="img-bottom-right" />
                Par contre, en analysant un peu les noms :
                <br></br>  <br></br>

                <div style={{ display: "flex", justifyContent: "center" }}> <Button onClick={() => setIsOpenNames(true)} label={"Noms"}></Button></div>
                <br></br>
                <div style={{ position: "relative" }}>
                    üëá Cliquer apr√®s avoir r√©fl√©chi √† une d√©duction üëá
                    <div style={{ background: isOpenSpoil ? "unset" : "var(--dark)" }} className="spoil_section" onClick={() => setisOpenSpoil(!isOpenSpoil)}>
                        Les noms <strong>partagent certaines syllabes</strong>.<br></br>
                        On peut donc plus facilement les utiliser au d√©triment des noms eux-m√™mes, afin d'obtenir des r√©sultats plus probants qu‚Äôauparavant avec des noms uniques.
                    </div>
                    {!isOpenSpoil && <img className="hide_gif" src={HideGif} />}
                </div>

            </div>
            {isOpenNames && <Modal imgClass="names_picture_class" setIsOpen={setIsOpenNames} title={"Un simple nom pour tant de mythes"} img={Names} legend={<span>Que constatons-nous ?</span>} />}

            <Wave
                text={"On sait que dans l'onomastique, les noms sont des d√©riv√©s de mots.\n\
                    Utiliser les syllabes et non les noms entiers, n'est donc pas probl√©matique pour le processus de cr√©ation. \n\
                    On peut donc les utiliser au d√©triment du noms, sans perdre l'int√©r√™t de base.\n\
                   Bien que √ßa ne soit pas une solution magique, nous pouvons fragmenter chaque noms par les syllabes qu'il comporte et faire non pas les traitements sur le nom entier, mais plut√¥t sur les syllabes."}
                description_modal="Donn√©es r√©colt√©es"
                onClick={() => setIsOpenTokens(true)}
            ></Wave>
            {isOpenTokens && <Modal imgClass="tokens_picture_class" setIsOpen={setIsOpenTokens} title={"Lorsque l'Unit√© ne suffit plus"} img={Tokens} legend={<span>A noter : Il existe <strong>1457</strong> tokens diff√©rents pour 444 noms.<br></br><strong>404</strong> parmis eux sont uniques.</span>} />}

            <FontBookBackground className="conclusion_context" main={"Nous pouvons d√©sormais\n commencer √† parler IA !"} />

        </div >
    );
};

export default Context;